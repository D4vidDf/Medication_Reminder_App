<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-feature android:name="android.hardware.type.watch" />

    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@android:style/Theme.DeviceDefault">

        <!-- Declare WearActivity -->
        <activity
            android:name=".ui.WearActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:taskAffinity="">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- Declare MedicationTileService -->
        <service
            android:name=".tile.MedicationTileService"
            android:exported="true"
            android:label="@string/tile_label"
            android:permission="com.google.android.wearable.permission.BIND_TILE_PROVIDER">
            <intent-filter>
                <action android:name="androidx.wear.tiles.action.BIND_TILE_PROVIDER" />
            </intent-filter>
            <!-- Add preview for the tile -->
            <meta-data
                android:name="androidx.wear.tiles.PREVIEW"
                android:resource="@drawable/tile_preview" />
        </service>

        <!-- DataLayerListenerService for receiving messages from the phone -->
        <service
            android:name=".services.WearableCommunicationService"
            android:exported="true"
            ><!-- This should be a ListenerService if it's receiving, or just a service if sending. The current implementation is a sender. -->

            <!-- If it were a listener, it would need an intent filter for messages or data changes -->
            <!-- Example for a listener for messages:
            <intent-filter>
                <action android:name="com.google.android.gms.wearable.MESSAGE_RECEIVED" />
                <data android:scheme="wear" android:host="*" android:pathPrefix="/mark_as_taken" />
            </intent-filter>
            -->
        </service>

        <!-- Service to listen for DataLayer changes from the phone -->
        <service
            android:name=".wear.services.WearDataListenerService"
            android:exported="true">
            <intent-filter>
                <action android:name="com.google.android.gms.wearable.DATA_CHANGED" />
                <!-- Specific host and path if needed, or wildcard for all data items -->
                <!-- <data android:scheme="wear" android:host="*" android:path="/today_schedule" /> -->
                <!-- For pathPrefix or exact path matching, host must be specified. Using * for host is common. -->
                <data android:scheme="wear" android:host="*" android:pathPrefix="/today_schedule" />
            </intent-filter>
        </service>


        <uses-library
            android:name="com.google.android.wearable"
            android:required="true" />
        <!--
               Set to true if your app is Standalone, that is, it does not require the handheld
               app to run. For this project, as it communicates with the phone,
               standalone might be true if it can function without the phone but enhanced with it,
               or false if it strictly requires the phone for its main features.
               Let's assume it can function with cached data if phone is disconnected, so true.
        -->
        <meta-data
            android:name="com.google.android.wearable.standalone"
            android:value="true" />

        <!-- Remove existing example complication and tile if they are not used or are replaced -->
        <!--
        <service
            android:name=".complication.MainComplicationService"
            ... />
        <service
            android:name=".tile.MainTileService"
            ... />
        <activity
            android:name=".presentation.MainActivity"
            ... />
        -->

    </application>

</manifest>